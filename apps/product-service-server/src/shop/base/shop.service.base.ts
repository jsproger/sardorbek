/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Shop as PrismaShop,
  Product as PrismaProduct,
} from "@prisma/client";

export class ShopServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.ShopCountArgs, "select">): Promise<number> {
    return this.prisma.shop.count(args);
  }

  async shops(args: Prisma.ShopFindManyArgs): Promise<PrismaShop[]> {
    return this.prisma.shop.findMany(args);
  }
  async shop(args: Prisma.ShopFindUniqueArgs): Promise<PrismaShop | null> {
    return this.prisma.shop.findUnique(args);
  }
  async createShop(args: Prisma.ShopCreateArgs): Promise<PrismaShop> {
    return this.prisma.shop.create(args);
  }
  async updateShop(args: Prisma.ShopUpdateArgs): Promise<PrismaShop> {
    return this.prisma.shop.update(args);
  }
  async deleteShop(args: Prisma.ShopDeleteArgs): Promise<PrismaShop> {
    return this.prisma.shop.delete(args);
  }

  async findProducts(
    parentId: string,
    args: Prisma.ProductFindManyArgs
  ): Promise<PrismaProduct[]> {
    return this.prisma.shop
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .products(args);
  }
}
