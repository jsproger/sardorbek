/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ServiceInstance } from "./ServiceInstance";
import { ServiceInstanceCountArgs } from "./ServiceInstanceCountArgs";
import { ServiceInstanceFindManyArgs } from "./ServiceInstanceFindManyArgs";
import { ServiceInstanceFindUniqueArgs } from "./ServiceInstanceFindUniqueArgs";
import { CreateServiceInstanceArgs } from "./CreateServiceInstanceArgs";
import { UpdateServiceInstanceArgs } from "./UpdateServiceInstanceArgs";
import { DeleteServiceInstanceArgs } from "./DeleteServiceInstanceArgs";
import { ServiceInstanceService } from "../serviceInstance.service";
@graphql.Resolver(() => ServiceInstance)
export class ServiceInstanceResolverBase {
  constructor(protected readonly service: ServiceInstanceService) {}

  async _serviceInstancesMeta(
    @graphql.Args() args: ServiceInstanceCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ServiceInstance])
  async serviceInstances(
    @graphql.Args() args: ServiceInstanceFindManyArgs
  ): Promise<ServiceInstance[]> {
    return this.service.serviceInstances(args);
  }

  @graphql.Query(() => ServiceInstance, { nullable: true })
  async serviceInstance(
    @graphql.Args() args: ServiceInstanceFindUniqueArgs
  ): Promise<ServiceInstance | null> {
    const result = await this.service.serviceInstance(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ServiceInstance)
  async createServiceInstance(
    @graphql.Args() args: CreateServiceInstanceArgs
  ): Promise<ServiceInstance> {
    return await this.service.createServiceInstance({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => ServiceInstance)
  async updateServiceInstance(
    @graphql.Args() args: UpdateServiceInstanceArgs
  ): Promise<ServiceInstance | null> {
    try {
      return await this.service.updateServiceInstance({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ServiceInstance)
  async deleteServiceInstance(
    @graphql.Args() args: DeleteServiceInstanceArgs
  ): Promise<ServiceInstance | null> {
    try {
      return await this.service.deleteServiceInstance(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
