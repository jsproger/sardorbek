/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  ServiceInstance as PrismaServiceInstance,
} from "@prisma/client";

export class ServiceInstanceServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ServiceInstanceCountArgs, "select">
  ): Promise<number> {
    return this.prisma.serviceInstance.count(args);
  }

  async serviceInstances(
    args: Prisma.ServiceInstanceFindManyArgs
  ): Promise<PrismaServiceInstance[]> {
    return this.prisma.serviceInstance.findMany(args);
  }
  async serviceInstance(
    args: Prisma.ServiceInstanceFindUniqueArgs
  ): Promise<PrismaServiceInstance | null> {
    return this.prisma.serviceInstance.findUnique(args);
  }
  async createServiceInstance(
    args: Prisma.ServiceInstanceCreateArgs
  ): Promise<PrismaServiceInstance> {
    return this.prisma.serviceInstance.create(args);
  }
  async updateServiceInstance(
    args: Prisma.ServiceInstanceUpdateArgs
  ): Promise<PrismaServiceInstance> {
    return this.prisma.serviceInstance.update(args);
  }
  async deleteServiceInstance(
    args: Prisma.ServiceInstanceDeleteArgs
  ): Promise<PrismaServiceInstance> {
    return this.prisma.serviceInstance.delete(args);
  }
}
