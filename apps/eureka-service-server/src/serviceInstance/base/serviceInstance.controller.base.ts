/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ServiceInstanceService } from "../serviceInstance.service";
import { ServiceInstanceCreateInput } from "./ServiceInstanceCreateInput";
import { ServiceInstance } from "./ServiceInstance";
import { ServiceInstanceFindManyArgs } from "./ServiceInstanceFindManyArgs";
import { ServiceInstanceWhereUniqueInput } from "./ServiceInstanceWhereUniqueInput";
import { ServiceInstanceUpdateInput } from "./ServiceInstanceUpdateInput";

export class ServiceInstanceControllerBase {
  constructor(protected readonly service: ServiceInstanceService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ServiceInstance })
  async createServiceInstance(
    @common.Body() data: ServiceInstanceCreateInput
  ): Promise<ServiceInstance> {
    return await this.service.createServiceInstance({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        instanceId: true,
        host: true,
        port: true,
        status: true,
        serviceName: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ServiceInstance] })
  @ApiNestedQuery(ServiceInstanceFindManyArgs)
  async serviceInstances(
    @common.Req() request: Request
  ): Promise<ServiceInstance[]> {
    const args = plainToClass(ServiceInstanceFindManyArgs, request.query);
    return this.service.serviceInstances({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        instanceId: true,
        host: true,
        port: true,
        status: true,
        serviceName: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ServiceInstance })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async serviceInstance(
    @common.Param() params: ServiceInstanceWhereUniqueInput
  ): Promise<ServiceInstance | null> {
    const result = await this.service.serviceInstance({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        instanceId: true,
        host: true,
        port: true,
        status: true,
        serviceName: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ServiceInstance })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateServiceInstance(
    @common.Param() params: ServiceInstanceWhereUniqueInput,
    @common.Body() data: ServiceInstanceUpdateInput
  ): Promise<ServiceInstance | null> {
    try {
      return await this.service.updateServiceInstance({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          instanceId: true,
          host: true,
          port: true,
          status: true,
          serviceName: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ServiceInstance })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteServiceInstance(
    @common.Param() params: ServiceInstanceWhereUniqueInput
  ): Promise<ServiceInstance | null> {
    try {
      return await this.service.deleteServiceInstance({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          instanceId: true,
          host: true,
          port: true,
          status: true,
          serviceName: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
